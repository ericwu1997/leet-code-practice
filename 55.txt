55. Jump Game

#define max(X, Y)  (X > Y ? X : Y)

bool canJump(int* nums, int numsSize){
    int n = nums[0];
    for(int i = 0; i < numsSize - 1; i++) {
        n = max(nums[i] + i, n);
        if(i + 1 > n)
            return false;
    }
    return true;
}

----------------------------------------------------

* Explain:
Keep track of the maximum index "N" we can reach. If the
current index can reach to a position further than "N",
update N to that maximum. For example, given
the following array.
v = [3,2,1,0....]
At index range [0, 1, 2], the maximum index we can jump
to is 3, which is fine. At 4th iteration, we are 
processing index 3. At this point, the furthest index we 
can reach is still 3, which is less than current index
+ 1. This means we cannot get pass this index. Hence,
the array would return false.

We don't have to process the last index, because the
last index is the goal. Hence, the for loop only
iterate up to "numsSize - 1"

* Description:
You are given an integer array nums. You are initially 
positioned at the array's first index, and each element
in the array represents your maximum jump length at that 
position. Return true if you can reach the last index, 
or false otherwise.

