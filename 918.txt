918. Maximum Sum Circular Subarray

#define max(X, Y)  (X > Y ? X : Y)

int maxSubArray(int* nums, int numsSize){
    int m = nums[0], n = m;
    for(int i = 1; i < numsSize; i++) {
        n = max(n + nums[i], nums[i]);
        m = max(n, m);
    }
    return m;
}

int maxSubarraySumCircular(int* nums, int numsSize){
    int sum = 0, linear, circular;
    
    linear = maxSubArray(nums, numsSize);
    for(int i = 0; i < numsSize; i++) {
        sum += nums[i];
        nums[i] *= -1;
    }
    circular = maxSubArray(nums, numsSize) + sum;
    if(circular == 0)
        return linear;
    return max(linear, circular);
}

----------------------------------------------------

* Explain:
The solutions uses "Kadane's algorithm". The function
"maxSubArray" is copied from the previous problem 
"No. 53 Maximum Subarray". 
1. [----A----][----B----][----C----]
The only cases when there's a circular solution is 
when the "maximum lost range" locates at the center
of intput array. All other cases can be account for
by treating it as liner solution. To calcuate the
circular solution, simply remove the total of "maximum
lost range" from the sum of the array.

If all values are negative, we have to choose at
least one smallest value. If "if(circular == 0)"
is used to deal with such cases.

* Description:
Given a circular integer array nums of length n, 
return the maximum possible sum of a non-empty 
subarray of nums. A circular array means the end 
of the array connects to the beginning of the array.
Formally, the next element of nums[i] is
nums[(i + 1) % n] and the previous element of 
nums[i] is nums[(i - 1 + n) % n]. A subarray may only 
include each element of the fixed buffer nums at most 
once. Formally, for a subarray nums[i], nums[i + 1], 
..., nums[j], there does not exist i <= k1, k2 <= j 
with k1 % n == k2 % n.

