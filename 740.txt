740. Delete and Earn

#define max(X, Y)  (X > Y ? X : Y)

int deleteAndEarn(int* nums, int numsSize){
    int v[10001] = {0}, i;
    int n = nums[0];
    for(i = 0; i < numsSize; i++) {
        v[nums[i]]++;
        if(n < nums[i])
            n = nums[i];
    }
    // v[1] = v[1] * 1 
    for(i = 2; i <= n; i++) {
        v[i] = max(v[i - 2] + v[i] * i, v[i - 1]);
    }
    return v[n];
}

----------------------------------------------------

* Explain:
Consider the problem on a small scale.
V = [1,1,3,3,3,4,5]
Initialize a vector "count" with size 100001. 
Next, for each number in vecotr "V", store the number
of occurance at index "I", where "I" is the number 
we are counting. For instance, vector "V" would produce
a "count" vector like this [0, 2, 0, 3, 1, 1, ....]

When choosing number for points, we can
1. choose the current number, abandon adjacent number, or
1. abanadon current number, choose adjacent number instead.
The purpose of count array is to make it eaiser to make 
that decision. We can use the following formula on 
"count" array to calculate the maximum point gain.
v[i] = max(v[i - 2] + v[i] * i, v[i - 1]);
where "i" is the number we are testing. "i - 1" is the
adjacent number.

* Description:
You are given an integer array nums. You want to maximize 
the number of points you get by performing the following 
operation any number of times:
""
  Pick any nums[i] and delete it to earn nums[i] points. 
  Afterwards, you must delete every element equal to 
  nums[i] - 1 and every element equal to nums[i] + 1.
""
Return the maximum number of points you can earn by 
applying the above operation some number of times.




